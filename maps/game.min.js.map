{"version":3,"sources":["game.min.js"],"names":["me","debug","Counters","Object","extend","init","stats","this","reset","self","keys","forEach","stat","inc","value","get","DebugPanel","Renderable","showKey","hideKey","_super","game","viewport","width","version","area","counters","sensors","front","left","right","robotPos","x","y","pos","z","Infinity","visible","frameUpdateTime","frameDrawTime","GUID","utils","createGUID","name","isPersistent","floating","isRenderable","alwaysUpdate","canvas","video","createCanvas","height","font_size","mod","font","Font","size","renderHitBox","Rect","renderVelocity","renderQuadTree","help_str","help_str_len","measureText","renderer","fps_str_len","memoryPositionX","displayFPS","input","bindKey","KEY","S","H","keyHandler","event","subscribe","KEYDOWN","action","show","hide","VIEWPORT_ONRESIZE","w","resize","patchSystemFn","HASH","_this","bounds","plugin","patch","timer","dt","_patched","countFPS","frameUpdateStartTime","window","performance","now","frameDrawStartTime","Sprite","anchorPoint","save","setColor","translate","strokeRect","top","restore","Entity","setLineWidth","copy","getBounds","sub","ancestor","_absPos","drawShape","shape","i","body","shapes","length","vel","strokeLine","Math","round","Container","rect","childBounds","registerPointerEvent","onClick","bind","world","addChild","repaint","removeEventListener","removeChild","update","isKeyPressed","e","containsPoint","gameX","gameY","drawQuadTreeNode","node","nodes","_alpha","objects","collision","maxChildren","fillRect","drawQuadTree","globalAlpha","quadTree","setGlobalAlpha","drawMemoryGraph","endX","memory","usedHeap","Number","prototype","usedJSHeapSize","totalHeap","totalJSHeapSize","maxLen","len","draw","children","drawCount","toFixed","fillStyle","setFont","fps_str","fps","sys","onDestroyEvent","unbindKey","unsubscribe","Panel","Base","Line","intersection","aLine","aLineX1","points","aLineY1","aLineX2","aLineY2","thisLineX1","thisLineY1","thisLineX2","thisLineY2","denominator","Vector2d","a","b","numerator2","pool","pull","Body","getEdgesAsLines","result","push","getBodyEdgesAsLines","onload","canvasWrapper","execution","state","run","pause","finish","isRunning","isPaused","hasFinished","changeMap","mapName","map","change","PLAY","resume","wrapper","antiAlias","onReady","register","defer","V","HUD","HUDContainer","enabled","enableHUD","robotEntity","getChildByProp","disableHUD","loader","loaded","preload","resources","set","LOADING","CustomLoadingScreen","alert","PlayScreen","PlayerEntity","Background","RobotPosition","RobotSensors","RobotShapes","WorldFrameEntity","robotPosition","localRobotPosition","text","angle","renderable","settings","currentLevel","levelDirector","getCurrentLevel","currentLevelWidth","cols","tilewidth","currentLevelHeight","rows","tileheight","tracer","traceCanvas","getContext","clearRect","traceRenderer","CanvasRenderer","follow","AXIS","BOTH","addAnimation","setCurrentAnimation","maxX","maxY","minX","minY","sensorRange","Ellipse","updateBounds","l","wheelRadious","maxAngularVel","PI","minAngularVel","maxNumericalVelocity","minNumericalVelocity","firstUpdate","mapValue","out_min","out_max","in_min","in_max","moveRobot","leftMotorVelocity","rightMotorVelocity","time","deltaAngle","cos","sin","rotate","old_x","old_y","fillArc","drawImage","check","interpreter","robotInstructions","step","onCompleted","instruction","duration","leftWheel","rightWheel","shift","data","colour","sensorResultCallback","createPrimitive","sensorName","onCollision","response","indexShapeA","overlapV","myLine","startPoint","edges","minDistance","MAX_SAFE_INTEGER","intersect","distance","actualMap","mapWidth","mapHeight","ProgressBar","v","h","invalidate","barHeight","progress","onProgressUpdate","logoScreen","image","getImage","ScreenObject","onResetEvent","ColorLayer","progressBar","getWidth","getHeight","logo","loaderHdlr","LOADER_PROGRESS","resizeHdlr","loadLevel"],"mappings":"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","file":"../game/game.min.js","sourcesContent":["/*\n * MelonJS Game Engine\n * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod\n * http://www.melonjs.org\n *\n * a simple debug panel plugin\n * usage : me.plugin.register.defer(this, me.debug.Panel, \"debug\");\n *\n * you can then use me.plugins.debug.show() or me.plugins.debug.hide()\n * to show or hide the panel, or press respectively the \"S\" and \"H\" keys.\n *\n * note :\n * Heap Memory information is available under Chrome when using\n * the \"--enable-memory-info\" parameter to launch Chrome\n */\n\n(function () {\n  // ensure that me.debug is defined\n  me.debug = me.debug || {};\n\n  var DEBUG_HEIGHT = 70;\n\n  var Counters = me.Object.extend({\n    init : function (stats) {\n      this.stats = {};\n      this.reset(stats);\n    },\n\n    reset : function (stats) {\n      var self = this;\n      (stats || Object.keys(this.stats)).forEach(function (stat) {\n        self.stats[stat] = 0;\n      });\n    },\n\n    inc : function (stat, value) {\n      this.stats[stat] += (value || 1);\n    },\n\n    get : function (stat) {\n      return this.stats[stat];\n    }\n  });\n\n  var DebugPanel = me.Renderable.extend({\n    /** @private */\n    init : function (showKey, hideKey) {\n      // call the super constructor\n      this._super(me.Renderable, \"init\", [ 0, 0, me.game.viewport.width, DEBUG_HEIGHT ]);\n\n      // minimum melonJS version expected\n      this.version = \"3.1.0\";\n\n      // to hold the debug options\n      // clickable rect area\n      this.area = {};\n\n      // Useful counters\n      this.counters = new Counters([\n        \"shapes\",\n        \"sprites\",\n        \"velocity\",\n        \"bounds\",\n        \"children\"\n      ]);\n\n      this.sensors = {\n        front: 0,\n        left: 0,\n        right: 0\n      };\n\n      this.robotPos = {\n        x: 0,\n        y: 0\n      }\n\n      // for z ordering\n      // make it ridiculously high\n      this.pos.z = Infinity;\n\n      // visibility flag\n      this.visible = false;\n\n      // frame update time in ms\n      this.frameUpdateTime = 0;\n\n      // frame draw time in ms\n      this.frameDrawTime = 0;\n\n      // set the object GUID value\n      this.GUID = \"debug-\" + me.utils.createGUID();\n\n      // set the object entity name\n      this.name = \"me.debugPanel\";\n\n      // persistent\n      this.isPersistent = true;\n\n      // a floating object\n      this.floating = true;\n\n      // renderable\n      this.isRenderable = true;\n\n      // always update, even when not visible\n      this.alwaysUpdate = true;\n\n      // WebGL/Canvas compatibility\n      this.canvas = me.video.createCanvas(this.width, this.height, true);\n\n      // create a default font, with fixed char width\n      this.font_size = 10;\n      this.mod = 1;\n      if (this.width < 500) {\n        this.font_size = 7;\n        this.mod = 0.7;\n      }\n      this.font = new me.Font(\"courier\", this.font_size, \"white\");\n\n      // clickable areas\n      var size = 12 * this.mod;\n      this.area.renderHitBox   = new me.Rect(163, 5,  size, size);\n      this.area.renderVelocity = new me.Rect(163, 20, size, size);\n      this.area.renderQuadTree = new me.Rect(253, 5,  size, size);\n\n      // some internal string/length\n      this.help_str    = \"(s)how/(h)ide\";\n      this.help_str_len  = this.font.measureText(me.video.renderer, this.help_str).width;\n      this.fps_str_len   = this.font.measureText(me.video.renderer, \"00/00 fps\").width;\n      this.memoryPositionX = 400 * this.mod;\n\n      // enable the FPS counter\n      me.debug.displayFPS = true;\n\n      // bind the \"S\" and \"H\" keys\n      me.input.bindKey(showKey || me.input.KEY.S, \"show\", false, false);\n      me.input.bindKey(hideKey || me.input.KEY.H, \"hide\", false, false);\n\n      // add some keyboard shortcuts\n      var self = this;\n      this.keyHandler = me.event.subscribe(me.event.KEYDOWN, function (action) {\n        if (action === \"show\") {\n          self.show();\n        }\n        else if (action === \"hide\") {\n          self.hide();\n        }\n      });\n      me.event.subscribe(me.event.VIEWPORT_ONRESIZE, function (w) {\n        self.resize(w, DEBUG_HEIGHT);\n      });\n\n      //patch patch patch !\n      this.patchSystemFn();\n    },\n\n    /**\n     * patch system fn to draw debug information\n     */\n    patchSystemFn : function () {\n\n      // add a few new debug flag (if not yet defined)\n      me.debug.renderHitBox   = me.debug.renderHitBox   || me.game.HASH[\"hitbox\"] || false;\n      me.debug.renderVelocity = me.debug.renderVelocity || me.game.HASH[\"velocity\"] || false;\n      me.debug.renderQuadTree = me.debug.renderQuadTree || me.game.HASH[\"quadtree\"] || false;\n\n      var _this = this;\n      var bounds = new me.Rect(0, 0, 0, 0);\n\n      // patch timer.js\n      me.plugin.patch(me.timer, \"update\", function (dt) {\n        // call the original me.timer.update function\n        this._patched(dt);\n\n        // call the FPS counter\n        me.timer.countFPS();\n      });\n\n      // patch me.game.update\n      me.plugin.patch(me.game, \"update\", function (dt) {\n        var frameUpdateStartTime = window.performance.now();\n\n        this._patched(dt);\n\n        // calculate the update time\n        _this.frameUpdateTime = window.performance.now() - frameUpdateStartTime;\n      });\n\n      // patch me.game.draw\n      me.plugin.patch(me.game, \"draw\", function () {\n        var frameDrawStartTime = window.performance.now();\n\n        _this.counters.reset();\n        this._patched();\n\n        // calculate the drawing time\n        _this.frameDrawTime = window.performance.now() - frameDrawStartTime;\n      });\n\n      // patch sprite.js\n      me.plugin.patch(me.Sprite, \"draw\", function (renderer) {\n        // call the original me.Sprite.draw function\n        this._patched(renderer);\n\n        // draw the sprite rectangle\n        if (me.debug.renderHitBox) {\n          var x = -this.anchorPoint.x * this.width;\n          var y = -this.anchorPoint.y * this.height;\n          \n          renderer.save();\n          renderer.setColor(\"green\");\n          renderer.translate(x, y);\n          renderer.strokeRect(this.left, this.top, this.width, this.height);\n          _this.counters.inc(\"sprites\");\n          renderer.restore();\n        }\n      });\n      \n      // patch entities.js\n      me.plugin.patch(me.Entity, \"draw\", function (renderer) {\n        // call the original me.Entity.draw function\n        this._patched(renderer);\n\n        // check if debug mode is enabled\n        if (me.debug.renderHitBox) {\n          renderer.save();\n          renderer.setLineWidth(1);\n\n          // draw the bounding rect shape\n          renderer.setColor(\"orange\");\n          bounds.copy(this.getBounds());\n          bounds.pos.sub(this.ancestor._absPos);\n          renderer.drawShape(bounds);\n          _this.counters.inc(\"bounds\");\n\n          // draw all defined shapes\n          renderer.setColor(\"red\");\n          renderer.translate(this.pos.x, this.pos.y);\n          for (var i = this.body.shapes.length, shape; i--, (shape = this.body.shapes[i]);) {\n            renderer.drawShape(shape);\n            _this.counters.inc(\"shapes\");\n          }\n          renderer.restore();\n        }\n\n        if (me.debug.renderVelocity && (this.body.vel.x || this.body.vel.y)) {\n          bounds.copy(this.getBounds());\n          bounds.pos.sub(this.ancestor._absPos);\n          // draw entity current velocity\n          var x = ~~(bounds.pos.x + (bounds.width / 2));\n          var y = ~~(bounds.pos.y + (bounds.height / 2));\n\n          renderer.save();\n          renderer.setLineWidth(1);\n\n          renderer.setColor(\"blue\");\n          renderer.translate(x, y);\n          renderer.strokeLine(0, 0, ~~(this.body.vel.x * (bounds.width / 2)), ~~(this.body.vel.y * (bounds.height / 2)));\n          _this.counters.inc(\"velocity\");\n\n          renderer.restore();\n        }\n      });\n\n      me.plugin.patch(me.Entity, \"update\", function (dt) {\n        /* Call the original update function */\n        this._patched(dt);\n        if(typeof this.sensors !== \"undefined\") {\n          _this.sensors.left = this.sensors.left;\n          _this.sensors.right = this.sensors.right;\n          _this.sensors.front = this.sensors.front;\n          _this.robotPos.x = Math.round(this.pos.x);\n          _this.robotPos.y = Math.round(this.pos.y);\n        }\n\n      });\n      // patch container.js\n      me.plugin.patch(me.Container, \"draw\", function (renderer, rect) {\n        // call the original me.Container.draw function\n        this._patched(renderer, rect);\n\n        // check if debug mode is enabled\n\n        if (me.debug.renderHitBox) {\n          renderer.save();\n          renderer.setLineWidth(1);\n\n          // draw the bounding rect shape\n          renderer.setColor(\"orange\");\n          bounds.copy(this.getBounds());\n          if (this.ancestor) {\n            bounds.pos.sub(this.ancestor._absPos);\n          }\n          renderer.drawShape(bounds);\n          _this.counters.inc(\"bounds\");\n\n          // draw the children bounding rect shape\n          renderer.setColor(\"purple\");\n          bounds.copy(this.childBounds);\n          if (this.ancestor) {\n            bounds.pos.sub(this.ancestor._absPos);\n          }\n          renderer.drawShape(bounds);\n          _this.counters.inc(\"children\");\n\n          renderer.restore();\n        }\n      });\n    },\n\n    /**\n     * show the debug panel\n     */\n    show : function () {\n      if (!this.visible) {\n        // register a mouse event for the checkboxes\n        me.input.registerPointerEvent(\"pointerdown\", this, this.onClick.bind(this));\n        // add the debug panel to the game world\n        me.game.world.addChild(this, Infinity);\n        // mark it as visible\n        this.visible = true;\n        // force repaint\n        me.game.repaint();\n      }\n    },\n\n    /**\n     * hide the debug panel\n     */\n    hide : function () {\n      if (this.visible) {\n        // release the mouse event for the checkboxes\n        // me.input.releasePointerEvent(\"pointerdown\", this);\n        this.canvas.removeEventListener(\"click\", this.onClick.bind(this));\n        // remove the debug panel from the game world\n        me.game.world.removeChild(this);\n        // mark it as invisible\n        this.visible = false;\n        // force repaint\n        me.game.repaint();\n      }\n    },\n\n\n    /** @private */\n    update : function () {\n      if (me.input.isKeyPressed(\"show\")) {\n        this.show();\n      }\n      else if (me.input.isKeyPressed(\"hide\")) {\n        this.hide();\n      }\n      return true;\n    },\n\n    /** @private */\n    onClick : function (e)  {\n      // check the clickable areas\n      if (this.area.renderHitBox.containsPoint(e.gameX, e.gameY)) {\n        me.debug.renderHitBox = !me.debug.renderHitBox;\n      }\n      else if (this.area.renderVelocity.containsPoint(e.gameX, e.gameY)) {\n        // does nothing for now, since velocity is\n        // rendered together with hitboxes (is a global debug flag required?)\n        me.debug.renderVelocity = !me.debug.renderVelocity;\n      }\n      else if (this.area.renderQuadTree.containsPoint(e.gameX, e.gameY)) {\n        me.debug.renderQuadTree = !me.debug.renderQuadTree;\n      }\n      // force repaint\n      me.game.repaint();\n    },\n\n    /** @private */\n    drawQuadTreeNode : function (renderer, node) {\n      var bounds = node.bounds;\n\n      // draw the current bounds\n      if (node.nodes.length === 0) {\n        // cap the alpha value to 0.4 maximum\n        var _alpha = (node.objects.length * 0.4) / me.collision.maxChildren;\n        if (_alpha > 0.0) {\n          renderer.save();\n          renderer.setColor(\"rgba(255,0,0,\" + _alpha + \")\");\n          renderer.fillRect(bounds.pos.x, bounds.pos.y, bounds.width, bounds.height);\n          renderer.restore();\n        }\n      }\n      else {\n        //has subnodes? drawQuadtree them!\n        for (var i = 0; i < node.nodes.length; i++) {\n          this.drawQuadTreeNode(renderer, node.nodes[i]);\n        }\n      }\n    },\n\n    /** @private */\n    drawQuadTree : function (renderer) {\n      // save the current globalAlpha value\n      var _alpha = renderer.globalAlpha();\n      var x = me.game.viewport.pos.x;\n      var y = me.game.viewport.pos.y;\n\n      renderer.translate(-x, -y);\n\n      this.drawQuadTreeNode(renderer, me.collision.quadTree);\n\n      renderer.translate(x, y);\n\n      renderer.setGlobalAlpha(_alpha);\n    },\n\n    /** @private */\n    drawMemoryGraph : function (renderer, endX) {\n      if (window.performance && window.performance.memory) {\n        var usedHeap  = Number.prototype.round(window.performance.memory.usedJSHeapSize / 1048576, 2);\n        var totalHeap =  Number.prototype.round(window.performance.memory.totalJSHeapSize / 1048576, 2);\n        var maxLen = ~~(endX - this.memoryPositionX - 5);\n        var len = maxLen * (usedHeap / totalHeap);\n\n        renderer.setColor(\"#0065AD\");\n        renderer.fillRect(this.memoryPositionX, 0, maxLen, 20);\n        renderer.setColor(\"#3AA4F0\");\n        renderer.fillRect(this.memoryPositionX + 1, 1, len - 1, 17);\n\n        this.font.draw(renderer, \"Heap : \" + usedHeap + \"/\" + totalHeap + \" MB\", this.memoryPositionX + 5, 5 * this.mod);\n      }\n      else {\n        // Heap Memory information not available\n        this.font.draw(renderer, \"Heap : ??/?? MB\", this.memoryPositionX, 5 * this.mod);\n      }\n    },\n\n    /** @private */\n    draw : function (renderer) {\n      renderer.save();\n\n      // draw the QuadTree (before the panel)\n      if (me.debug.renderQuadTree === true) {\n        this.drawQuadTree(renderer);\n      }\n\n      // draw the panel\n      renderer.setGlobalAlpha(0.5);\n      renderer.setColor(\"black\");\n      renderer.fillRect(\n        this.left,  this.top,\n        this.width, this.height\n      );\n      renderer.setGlobalAlpha(1.0);\n\n      this.font.draw(renderer, \"#objects : \" + me.game.world.children.length, 5 * this.mod, 5 * this.mod);\n      this.font.draw(renderer, \"#draws   : \" + me.game.world.drawCount, 5 * this.mod, 20 * this.mod);\n\n      // debug checkboxes\n      this.font.draw(renderer, \"?hitbox   [\" + (me.debug.renderHitBox ? \"x\" : \" \") + \"]\",   100 * this.mod, 5 * this.mod);\n      this.font.draw(renderer, \"?velocity [\" + (me.debug.renderVelocity ? \"x\" : \" \") + \"]\", 100 * this.mod, 20 * this.mod);\n\n      this.font.draw(renderer, \"?QuadTree [\" + (me.debug.renderQuadTree ? \"x\" : \" \") + \"]\", 190 * this.mod, 5 * this.mod);\n\n      // draw the update duration\n      this.font.draw(renderer, \"Update : \" + this.frameUpdateTime.toFixed(2) + \" ms\", 285 * this.mod, 5 * this.mod);\n      // draw the draw duration\n      this.font.draw(renderer, \"Draw   : \" + this.frameDrawTime.toFixed(2) + \" ms\", 285 * this.mod, 20 * this.mod);\n\n      // Draw color code hints\n      this.font.fillStyle.copy(\"red\");\n      this.font.draw(renderer, \"Shapes   : \" + this.counters.get(\"shapes\"), 5 * this.mod, 35 * this.mod);\n\n      this.font.fillStyle.copy(\"green\");\n      this.font.draw(renderer, \"Sprites   : \" + this.counters.get(\"sprites\"), 100 * this.mod, 35 * this.mod);\n\n      this.font.fillStyle.copy(\"blue\");\n      this.font.draw(renderer, \"Velocity  : \" + this.counters.get(\"velocity\"), 190 * this.mod, 35 * this.mod);\n\n      this.font.fillStyle.copy(\"orange\");\n      this.font.draw(renderer, \"Bounds : \" + this.counters.get(\"bounds\"), 285 * this.mod, 35 * this.mod);\n\n      this.font.fillStyle.copy(\"purple\");\n      this.font.draw(renderer, \"Children : \" + this.counters.get(\"children\"), 400 * this.mod, 35 * this.mod);\n\n      // Reset font style\n      this.font.setFont(\"courier\", this.font_size, \"white\");\n\n      /* Draw sensors */\n      this.font.draw(renderer, \"Front sensor: \" + this.sensors.front, 5 * this.mod, 50 * this.mod);\n      this.font.draw(renderer, \"Left sensor: \" + this.sensors.left, 130 * this.mod, 50 * this.mod);\n      this.font.draw(renderer, \"Right sensor: \" + this.sensors.right, 260 * this.mod, 50 * this.mod);\n      this.font.draw(renderer, \"Robot pos: (\" + this.robotPos.x + \", \" + this.robotPos.y + \")\", 390 * this.mod, 50 * this.mod);\n\n      // draw the memory heap usage\n      var endX = this.width - 25;\n      this.drawMemoryGraph(renderer, endX - this.help_str_len);\n\n      // some help string\n      this.font.draw(renderer, this.help_str, endX - this.help_str_len, 20 * this.mod);\n\n      //fps counter\n      var fps_str = me.timer.fps + \"/\" + me.sys.fps + \" fps\";\n      this.font.draw(renderer, fps_str, this.width - this.fps_str_len - 5, 5 * this.mod);\n\n      renderer.restore();\n    },\n\n    /** @private */\n    onDestroyEvent : function () {\n      // hide the panel\n      this.hide();\n      // unbind keys event\n      me.input.unbindKey(me.input.KEY.S);\n      me.input.unbindKey(me.input.KEY.H);\n      me.event.unsubscribe(this.keyHandler);\n    }\n  });\n\n  /**\n   * @class\n   * @public\n   * @extends me.plugin.Base\n   * @memberOf me\n   * @constructor\n   */\n  me.debug.Panel = me.plugin.Base.extend(\n  /** @scope me.debug.Panel.prototype */\n  {\n\n    /** @private */\n    init : function (showKey, hideKey) {\n      // call the super constructor\n      this._super(me.plugin.Base, \"init\");\n\n      var panel = new DebugPanel(showKey, hideKey);\n      panel.show();\n    }\n  });\n\n  /*---------------------------------------------------------*/\n  // END END END\n  /*---------------------------------------------------------*/\n})();\n\n(function () {\n\tme.Line = me.Line.extend({\n\t\tintersection : function(aLine) {\n\t      var aLineX1 = aLine.points[0].x + aLine.pos.x;\n\t      var aLineY1 = aLine.points[0].y + aLine.pos.y;\n\t      var aLineX2 = aLine.points[1].x + aLine.pos.x;\n\t      var aLineY2 = aLine.points[1].y + aLine.pos.y;\n\n\t      var thisLineX1 = this.points[0].x + this.pos.x;\n\t      var thisLineY1 = this.points[0].y + this.pos.y;\n\t      var thisLineX2 = this.points[1].x + this.pos.x;\n\t      var thisLineY2 = this.points[1].y + this.pos.y;\n\n\t      // denominator = ((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY));\n\t      var denominator = ((aLineY2 - aLineY1) * (thisLineX2 - thisLineX1)) - \n\t        ((aLineX2 - aLineX1) * (thisLineY2 - thisLineY1));\n\t      if (denominator == 0)\n\t          return null;\n\t      new me.Vector2d()\n\t      var a = thisLineY1 - aLineY1;\n\t      var b = thisLineX1 - aLineX1;\n\t      var numerator1 = ((aLineX2 - aLineX1) * a) - ((aLineY2 - aLineY1) * b);\n\t      var numerator2 = ((thisLineX2 - thisLineX1) * a) - ((thisLineY2 - thisLineY1) * b);\n\t      a = numerator1 / denominator;\n\t      b = numerator2 / denominator;\n\n\t      // if line2 is a segment and line1 is infinite, they intersect if:\n\t      if ((b > 0 && b < 1) && (a > 0 && a < 1)) {\n\t        var x = thisLineX1 + (a * (thisLineX2 - thisLineX1));\n\t        var y = thisLineY1 + (a * (thisLineY2 - thisLineY1));\n\t        return me.pool.pull(\"vector\", x, y);\n\t      }\n\t      // if line1 and line2 are segments, they intersect if both of the above are true\n\t      return null;\n\t    }\n\t});\n\n\tme.Body = me.Body.extend({\n\t\tgetEdgesAsLines : function() {\n\t\t\tvar result = [];\n\t\t\tif(this.points.length == 2)\n\t\t\t\treturn [me.pool.pull(\"line\", 0, 0, [this.points[0], this.points[1]])];\n\t\t\tfor(var i = 0; i < this.points.length; i++) {\n\t\t\t\tif(i < this.points.length - 1)\n\t\t\t\t\tresult.push(me.pool.pull(\"line\", 0, 0, [this.points[i], this.points[i + 1]]));\n\t\t\t\telse\n\t\t\t\t\tresult.push(me.pool.pull(\"line\", 0, 0, [this.points[i], this.points[0]]));\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t});\n\n\tme.Entity = me.Entity.extend({\n\t\tgetBodyEdgesAsLines : function() {\n\t\t\tvar result = this.body.getEdgesAsLines();\n\t\t\t/* Get the edges of the shape transformed to world positions */\n\t\t\tfor(var i = 0; i < result.length; i++) {\n\t\t\t\tresult[i].pos.x += this.pos.x;\n\t\t\t\tresult[i].pos.y += this.pos.y;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t});\n\n})();\n\n/* Game namespace */\nvar game = {\n\n  // Run on page load.\n\n  onload : function (canvasWrapper) {\n    /* \n      0 => running\n      1 => paused\n      2 => finished\n    */\n    me.execution = {\n      state : 2,\n      run : function() { this.state = 0; },\n      pause : function() { this.state = 1; },\n      finish : function() { this.state = 2; },\n      isRunning : function() { return this.state == 0; },\n      isPaused : function() { return this.state == 1; },\n      hasFinished : function() { return this.state == 2; }\n    };\n    \n    me.game.changeMap = function(mapName) {\n      me.game.map = mapName;\n      me.state.pause();\n      me.state.change(me.state.PLAY);\n      me.state.resume();\n    }\n\n    // Initialize the video.\n    if (!me.video.init(640, 640, {wrapper : canvasWrapper, antiAlias: true})) {\n      alert(\"Your browser does not support HTML5 canvas.\");\n      return;\n    }\n\n    if (me.game.HASH[\"debug\"]) {\n        window.onReady(function () {\n            me.plugin.register.defer(this, me.debug.Panel, \"debug\", me.input.KEY.V);\n        });\n    }\n\n    me.game.HUD = {\n      HUDContainer : null,\n      enabled : false,\n      enableHUD : function() {\n        this.enabled = true;\n        var robotEntity = me.game.world.getChildByProp(\"name\", \"robot\")[0];\n        this.HUDContainer = me.pool.pull(\"HUDContainer\", robotEntity);\n        me.game.world.addChild(this.HUDContainer);\n      },\n      disableHUD : function() {\n        this.enabled = false;\n        me.game.world.removeChild(this.HUDContainer);\n      }\n    };\n\n    // Set a callback to run when loading is complete.\n    me.loader.onload = this.loaded.bind(this);\n\n    // Load the resources.\n    me.loader.preload(game.resources);\n\n    // Initialize melonJS and display a loading screen.\n    me.state.set(me.state.LOADING, new game.CustomLoadingScreen());\n    me.state.change(me.state.LOADING);\n  },\n\n  // Run on game resources loaded.\n  loaded : function () {\n    /* Set the map to be loaded */\n    me.game.map = \"area03\";\n\n    me.state.set(me.state.PLAY, new game.PlayScreen());\n\n    /* Add our player entity in the entity pool */\n    me.pool.register(\"mainPlayer\", game.PlayerEntity);\n\n    /* HUD Container */\n    me.pool.register(\"HUDContainer\", game.HUD.Container, true);\n    me.pool.register(\"HUDBackground\", game.HUD.Background, true);\n    me.pool.register(\"HUDRobotPosition\", game.HUD.RobotPosition, true);\n    me.pool.register(\"HUDRobotSensors\", game.HUD.RobotSensors, true);\n    me.pool.register(\"HUDRobotShapes\", game.HUD.RobotShapes, true);\n\n\n    me.pool.register(\"worldEntity\", game.WorldFrameEntity);\n    me.pool.register(\"line\", me.Line, true);\n    me.pool.register(\"vector\", me.Vector2d, true);\n\n    // Start the game.\n    me.state.change(me.state.PLAY);\n  }\n};\n\n/**\n * a HUD container and child items\n */\n\ngame.HUD = game.HUD || {};\n\n\ngame.HUD.Container = me.Container.extend({\n  init : function(robotEntity) {\n    this._super(me.Container, 'init');\n    /* Make sure we follow the viewport */\n    this.floating = true;\n    /* Make sure our object is always draw first */\n    this.z = Infinity;\n    this.name = \"HUD\";\n\n    this.robotEntity = robotEntity;\n    this.addChild(me.pool.pull(\"HUDBackground\", 0, 0, me.game.viewport.width, 50));\n    this.addChild(me.pool.pull(\"HUDRobotPosition\", 10, 5, this.robotEntity.pos));\n    this.addChild(me.pool.pull(\"HUDRobotSensors\", 10, 25, this.robotEntity.sensors));\n    this.addChild(me.pool.pull(\"HUDRobotShapes\", this.robotEntity));\n    }\n});\n\ngame.HUD.RobotSensors = me.Renderable.extend({\n  init : function(x, y, sensors) {\n    this._super(me.Renderable, 'init', [x, y, 10, 10]);\n    this.sensors = sensors;\n    this.font = new me.Font(\"courier\", 14, \"white\");\n  },\n\n  update : function () {\n    return true;\n  },\n\n  draw : function (renderer) {\n    this.font.draw(renderer, \"Sensor izquierdo: \" + this.sensors.left, \n      this.pos.x, \n      this.pos.y);\n\n    this.font.draw(renderer, \"Sensor derecho: \" + this.sensors.right, \n      this.pos.x + 240, \n      this.pos.y);\n\n    this.font.draw(renderer, \"Sensor frontal: \" + this.sensors.front, \n      this.pos.x + 460,\n      this.pos.y);\n  }\n});\n\n\ngame.HUD.RobotPosition = me.Renderable.extend({\n  init : function(x, y, robotPosition) {\n    this._super(me.Renderable, 'init', [x, y, 10, 10]);\n    this.robotPosition = robotPosition;\n    this.localRobotPosition = { x : 0, y : 0 };\n    this.font = new me.Font(\"courier\", 14, \"white\");\n  },\n\n  update : function () {\n    /* Update only if the position changed */\n    if(this.robotPosition.x != this.localRobotPosition.x ||\n      this.robotPosition.y != this.localRobotPosition.y) {\n      this.localRobotPosition.x = Math.round(this.robotPosition.x);\n      this.localRobotPosition.y = Math.round(this.robotPosition.y);\n      return true;\n    }\n    return false;\n  },\n\n  draw : function (renderer) {\n    var text = \"Posición del robot: (\" + this.localRobotPosition.x + \", \" + this.localRobotPosition.y + \")\";\n    this.font.draw(renderer, text, this.pos.x + 2, this.pos.y);\n  }\n});\n\ngame.HUD.RobotShapes = me.Renderable.extend({\n  init : function(robotEntity) {\n    this._super(me.Renderable, 'init', [robotEntity.pos.x, robotEntity.pos.y, 10, 10]);\n    this.localRobotPosition = { x : 0, y : 0, angle: 0.0 };\n    this.robotEntity = robotEntity;\n  },\n\n  update : function() {\n\n    /* Only update if the position or the angle changed */\n    if(this.localRobotPosition.x != this.robotEntity.pos.x ||\n      this.localRobotPosition.y != this.robotEntity.pos.y ||\n      this.localRobotPosition.angle != this.robotEntity.renderable.angle) {\n      this.localRobotPosition.x = this.robotEntity.pos.x;\n      this.localRobotPosition.y = this.robotEntity.pos.y;\n      this.localRobotPosition.angle = this.robotEntity.renderable.angle;\n      return true;\n    }\n    return false;\n  },\n\n  draw : function(renderer) {\n    renderer.save();\n    renderer.setLineWidth(1.5);\n    /* Draw all shapes */\n    renderer.setColor(\"red\");\n    renderer.translate(this.localRobotPosition.x - me.game.viewport.pos.x, \n      this.localRobotPosition.y - me.game.viewport.pos.y);\n    for (var i = this.robotEntity.body.shapes.length - 1, \n      shape; i--, (shape = this.robotEntity.body.shapes[i]);) {\n      renderer.drawShape(shape);\n    }\n    renderer.restore();\n  }\n\n});\n\ngame.HUD.Background = me.Renderable.extend({\n  init : function(x, y, width, height) {\n      this._super(me.Renderable, 'init', [x, y, width, height]);\n      this.width = width;\n      this.height = height;\n  },\n\n  draw : function(renderer) {\n      renderer.setGlobalAlpha(0.5);\n      renderer.setColor(\"black\");\n      renderer.fillRect(\n          this.pos.x,  this.pos.y,\n          this.width, this.height\n      );\n      renderer.setGlobalAlpha(1);\n  }\n});\n\n/**\n * Player Entity\n */\ngame.PlayerEntity = me.Entity.extend({\n  /* -----\n  \n  constructor\n  \n  ------ */ \n  init: function(x, y, settings) {\n    // call the constructor\n    settings.name = \"robot\"\n    this._super(me.Entity, 'init', [x, y, settings]);\n\n\n    this.renderable.width = this.width;\n    this.renderable.height = this.height;\n\n    /* Get current level */\n    var currentLevel = me.levelDirector.getCurrentLevel();\n\n    /* Get current level width and height*/\n    this.currentLevelWidth = (currentLevel.cols * currentLevel.tilewidth);\n    this.currentLevelHeight = (currentLevel.rows * currentLevel.tileheight);\n\n    this.tracer = {\n      enabled : false,\n    };\n\n    /* Creating the tracer canvas to draw the robot's movements */\n    this.traceCanvas = me.video.createCanvas(this.currentLevelWidth, this.currentLevelHeight, true);\n    this.traceCanvas.getContext(\"2d\").clearRect(0, 0, this.currentLevelWidth, this.currentLevelHeight);\n    this.traceRenderer = new me.CanvasRenderer(this.traceCanvas, me.game.viewport.width, me.game.viewport.height);\n    this.traceRenderer.setColor(\"#000000\");\n\n    /* Set the display to follow our position on both axis (in case the map is too big) */\n    me.game.viewport.follow(this.pos, me.game.viewport.AXIS.BOTH);\n\n    /* Ensure the player is updated even when outside of the viewport */\n    this.alwaysUpdate = true;\n \n    /* Defines the standing animation (using the first frame) */\n    this.renderable.addAnimation(\"unique\",  [0]);\n\n    /* Set the unique animation to be rendered */\n    this.renderable.setCurrentAnimation(\"unique\");\n\n    /* Defines the map limits */\n    this.maxX = this.currentLevelWidth - (this.width / 2) - 0.1;\n    this.maxY = this.currentLevelHeight - (this.height / 2) - 0.1;\n    this.minX = this.width / 2;\n    this.minY = this.height / 2;\n\n    /* Range of detection */\n    this.sensorRange = 50;\n\n    this.sensors = {\n      front: this.sensorRange,\n      left: this.sensorRange,\n      right: this.sensorRange\n    };\n\n    /* As our robot is round, make its shape to be an ellipse */\n    this.body.shapes[0] = new me.Ellipse(0, 0, this.width, this.width);\n\n    /* Shapes for the sensors */\n    this.body.shapes[1] = new me.Line(0, this.width / 2, \n      [new me.Vector2d(0,0), new me.Vector2d(0, this.sensorRange)]);\n    this.body.shapes[2] = new me.Line(0, - this.width / 2, \n      [new me.Vector2d(0,0), new me.Vector2d(0, - this.sensorRange)]);\n    this.body.shapes[3] = new me.Line(this.width / 2, 0, \n      [new me.Vector2d(0,0), new me.Vector2d(this.sensorRange, 0)]);\n    this.body.shapes[4] = new me.Line(- this.width / 2, 0, \n      [new me.Vector2d(0,0), new me.Vector2d(- this.sensorRange, 0)]);\n    this.body.updateBounds();\n\n    /* Distance between the center of the two wheels, 30 pixels */\n    this.l = 30;\n    this.wheelRadious = 5;\n\n    this.maxAngularVel = 16 * Math.PI;\n    this.minAngularVel = -16 * Math.PI;\n    this.maxNumericalVelocity = 100;\n    this.minNumericalVelocity = -100;\n\n    this.firstUpdate = true;\n  },\n\n  mapValue : function(value, out_min, out_max, in_min, in_max) {\n    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n  },\n\n  /* http://planning.cs.uiuc.edu/node659.html */\n  moveRobot : function(leftMotorVelocity, rightMotorVelocity, time) {\n    /* Convert numerical velocity to angular velocity */\n    leftMotorVelocity = time * this.mapValue(leftMotorVelocity, \n      this.minAngularVel, this.maxAngularVel, this.minNumericalVelocity, this.maxNumericalVelocity);\n    rightMotorVelocity = time * this.mapValue(rightMotorVelocity,\n      this.minAngularVel, this.maxAngularVel, this.minNumericalVelocity, this.maxNumericalVelocity);\n\n    var deltaAngle = (this.wheelRadious/this.l) * (leftMotorVelocity - rightMotorVelocity);\n    this.pos.x += (this.wheelRadious/2)*(leftMotorVelocity + rightMotorVelocity)*Math.cos(this.renderable.angle);\n    this.pos.y += (this.wheelRadious/2)*(leftMotorVelocity + rightMotorVelocity)*Math.sin(this.renderable.angle);\n    this.renderable.angle += deltaAngle;\n\n    for(i=1; i<this.body.shapes.length; i++) {\n      this.body.shapes[i].rotate(deltaAngle);\n      old_x = this.body.shapes[i].pos.x;\n      old_y = this.body.shapes[i].pos.y;\n      this.body.shapes[i].pos.x = Math.cos(deltaAngle) * (old_x-0) - Math.sin(deltaAngle) * (old_y-0) + 0;\n      this.body.shapes[i].pos.y = Math.sin(deltaAngle) * (old_x-0) + Math.cos(deltaAngle) * (old_y-0) + 0;\n    }\n  },\n\n  /* Extends draw function to draw the tracing */\n  draw: function(renderer) {\n    if(this.tracer.enabled)\n      this.traceRenderer.fillArc(this.pos.x, this.pos.y - 6, 6, 0, 2*Math.PI);\n    renderer.drawImage(this.traceCanvas, 0, 0);\n\n    this._super(me.Entity, 'draw', [renderer]);\n  },\n\n  /* -----\n \n  update the player pos\n \n  ------ */\n  update: function(dt) {\n    this._super(me.Entity, 'update', [dt]);\n    /* Fixes incorrect sensors when loaded */\n    if(this.firstUpdate) {\n      me.collision.check(this);\n      this.firstUpdate = false;\n    }\n\n    if(me.interpreter !== null && !me.execution.hasFinished()) {\n      /* If the instructions waiting to be excecuted are lower than 1000 */\n      if(me.interpreter.robotInstructions.length < 1000) {\n        /* Do 10 steps with the interpreter */\n        for (var i = 0; i < 10; i++) {\n          /* If we don't have instructions to excecute and the interpreter is marked as completed\n            excecute the interpreter's onCompleted function.\n           */\n          if(me.interpreter.step() === false && me.interpreter.robotInstructions.length === 0) {\n            me.execution.finish();\n            me.execution.onCompleted();\n            break;\n          }\n        }\n      }\n\n      if(me.interpreter.robotInstructions.length > 0) {\n        /* If it's not paused and we have instructions to execute, excecute them */\n        if(me.interpreter.robotInstructions.length > 0 && !me.execution.isPaused()) {\n          var instruction = me.interpreter.robotInstructions[0];\n          switch(instruction.action) {\n            case 'motor':\n              var duration = instruction.duration;\n              var leftWheel = instruction.leftWheel;\n              var rightWheel = instruction.rightWheel;\n\n              this.moveRobot(leftWheel, rightWheel, (dt / 1000));\n\n              instruction.duration -= dt / 1000;\n              if(instruction.duration <= 0) {\n                me.interpreter.robotInstructions.shift();\n              }\n\n              break;\n            case 'tracer_status':\n              this.tracer.enabled = instruction.enabled.data;\n              me.interpreter.robotInstructions.shift();\n              break;\n            case 'tracer_colour':\n              this.traceRenderer.setColor(instruction.colour.data);\n              me.interpreter.robotInstructions.shift();\n              break;\n            case 'sensor':\n              instruction.sensorResultCallback(\n                me.interpreter.createPrimitive(this.sensors[instruction.sensorName.data])\n              );\n              me.interpreter.robotInstructions.shift();\n              break;\n          }\n        }\n      }\n    }\n\n    /* Sensor's settings */\n    this.sensors.left = this.sensorRange;\n    this.sensors.right = this.sensorRange;\n    this.sensors.front = this.sensorRange;\n\n    /* Limits checking */\n    if(this.pos.x <= this.minX) {\n      this.pos.x = this.minX;\n    }\n    else if(this.pos.x >= this.maxX) {\n      this.pos.x = this.maxX;\n    }\n\n    if(this.pos.y <= this.minY) {\n      this.pos.y = this.minY + 0.10;\n    }\n    else if(this.pos.y >= this.maxY) {\n      this.pos.y = this.maxY;\n    }\n\n    /* Adding collision */\n    me.collision.check(this);\n\n    return true;\n\n  },\n   /**\n   * colision handler\n   * (called when colliding with other objects)\n   */\n  onCollision : function (response) {\n    /* If the colliding shape belongs to the robot, do a normal collision */\n    if(response.indexShapeA === 0 || typeof response.indexShapeA === \"undefined\") {\n      this.pos.sub(response.overlapV);\n      return true;\n    }\n\n    /* Create a copy of the sensor's range line and positionate it into the level */\n    var myLine = me.pool.pull(\"line\", \n      response.a.body.shapes[response.indexShapeA].pos.x + response.a.pos.x, \n      response.a.body.shapes[response.indexShapeA].pos.y + response.a.pos.y,\n      [response.a.body.shapes[response.indexShapeA].points[0], \n        response.a.body.shapes[response.indexShapeA].points[1]]);\n\n    /* Get a copy of the line's starting point */\n    var startPoint = me.pool.pull(\"vector\", myLine.pos.x, myLine.pos.y);\n\n    /* Get all edges of the entity beeing touched by the sensor line */\n    var edges = response.b.getBodyEdgesAsLines();\n\n    /* \n     Calculate the minium distance between the starting point and \n     the point of intersection between the sensor line and the entity\n     edges. \n    */\n    var minDistance = Number.MAX_SAFE_INTEGER;\n    for (var i = 0; i < edges.length; i++) {\n      var intersect = myLine.intersection(edges[i]);\n      me.pool.push(edges[i]);\n      if(intersect !== null) {\n        var distance = Math.round(startPoint.distance(intersect));\n        if(distance < minDistance)\n          minDistance = distance;\n        me.pool.push(intersect);\n      }\n    }\n\n     /* Set the sensor's values */\n    switch(response.indexShapeA) {\n      case 1:\n        response.a.sensors.right = minDistance;\n        break;\n      case 2:\n        response.a.sensors.left = minDistance;\n        break;\n      case 3:\n        response.a.sensors.front = minDistance;\n        break;\n     }\n\n    /* Return elements to the pool */\n    me.pool.push(myLine);\n    me.pool.push(startPoint);\n\n    return false;\n  }\n});\n\ngame.WorldFrameEntity = me.Entity.extend({\n  init: function() {\n    settings = {\n      name : \"worldEntity\",\n      width : me.game.viewport.width,\n      height : me.game.viewport.height\n    };\n    this._super(me.Entity, 'init', [0, 0, settings]);\n\n    var actualMap = me.levelDirector.getCurrentLevel();\n\n    this.mapWidth = actualMap.cols * actualMap.tilewidth;\n    this.mapHeight = actualMap.rows * actualMap.tileheight;\n\n    /* Top line */\n    this.body.shapes[0] = new me.Line(0, 0, [new me.Vector2d(0, 0), \n      new me.Vector2d(this.mapWidth, 0)]);\n    /* Left line */\n    this.body.shapes[1] = new me.Line(0, 0, [new me.Vector2d(0, 0), \n      new me.Vector2d(0, this.mapHeight)]);\n    /* Right line */\n    this.body.shapes[2] = new me.Line(0, 0, [new me.Vector2d(this.mapWidth, 0), \n      new me.Vector2d(this.mapWidth, this.mapHeight)]);\n    /* Bottom line */\n    this.body.shapes[3] = new me.Line(0, 0, [new me.Vector2d(0, this.mapHeight), \n      new me.Vector2d(this.mapWidth, this.mapHeight)]);\n\n    this.body.updateBounds();\n  }\n\n});\nvar ProgressBar = me.Renderable.extend({\n\n    init: function (v, w, h) {\n        this._super(me.Renderable, \"init\", [v.x, v.y, w, h]);\n        // flag to know if we need to refresh the display\n        this.invalidate = false;\n\n        // default progress bar height\n        this.barHeight = 4;\n\n        // current progress\n        this.progress = 0;\n    },\n\n    // make sure the screen is refreshed every frame\n    onProgressUpdate : function (progress) {\n        this.progress = ~~(progress * this.width);\n        this.invalidate = true;\n    },\n\n    // make sure the screen is refreshed every frame\n    update : function () {\n        if (this.invalidate === true) {\n            // clear the flag\n            this.invalidate = false;\n            // and return true\n            return true;\n        }\n        // else return false\n        return false;\n    },\n\n     // draw function\n    draw : function (renderer) {\n        // draw the progress bar\n        renderer.setColor(\"black\");\n        renderer.fillRect(0, (this.height / 2) - (this.barHeight / 2), this.width, this.barHeight);\n\n        renderer.setColor(\"#286090\");\n        renderer.fillRect(0, (this.height / 2) - (this.barHeight / 2), this.progress, this.barHeight);\n    }\n});\n\n/**\n * a default loading screen\n * @memberOf me\n * @ignore\n * @constructor\n */\n\ngame.logoScreen = me.Sprite.extend({\n   init : function (x, y) {\n    var image = me.loader.getImage(\"DC_small\");\n    this._super(me.Sprite, \"init\", [x, y - image.height, { image : image }]);\n   }\n });\n\ngame.CustomLoadingScreen = me.ScreenObject.extend({\n    // call when the loader is resetted\n    onResetEvent : function () {\n        // background color\n        me.game.world.addChild(new me.ColorLayer(\"background\", \"#FFFFFF\", 0), 0);\n\n        // progress bar\n        var progressBar = new ProgressBar(\n            new me.Vector2d(),\n            me.video.renderer.getWidth(),\n            me.video.renderer.getHeight()\n        );\n\n        var logo = new game.logoScreen((me.game.viewport.width / 2), (me.game.viewport.height / 2));\n\n        this.loaderHdlr = me.event.subscribe(\n            me.event.LOADER_PROGRESS,\n            progressBar.onProgressUpdate.bind(progressBar)\n        );\n\n        this.resizeHdlr = me.event.subscribe(\n            me.event.VIEWPORT_ONRESIZE,\n            progressBar.resize.bind(progressBar)\n        );\n\n        me.game.world.addChild(progressBar, 2);\n        me.game.world.addChild(logo, 1);\n    },\n\n    // destroy object at end of loading\n    onDestroyEvent : function () {\n        // cancel the callback\n        me.event.unsubscribe(this.loaderHdlr);\n        me.event.unsubscribe(this.resizeHdlr);\n        this.loaderHdlr = this.resizeHdlr = null;\n    }\n});\ngame.PlayScreen = me.ScreenObject.extend({\n  onResetEvent: function() {\n    /* Load level */\n    me.levelDirector.loadLevel(me.game.map);\n\n    var robotEntity = me.game.world.getChildByProp(\"name\", \"robot\")[0];\n\n    /* Add the world entity */\n    me.game.world.addChild(me.pool.pull(\"worldEntity\"));\n\n    /* Add the HUD */\n    if(me.game.HUD.enabled) {\n      me.game.HUD.HUDContainer = me.pool.pull(\"HUDContainer\", robotEntity);\n      me.game.world.addChild(me.game.HUD.HUDContainer);\n    }\n  },\n\n    /**\n     * Action to perform when leaving this screen (state change)\n     */\n  onDestroyEvent: function() {\n  }\n});\n"]}